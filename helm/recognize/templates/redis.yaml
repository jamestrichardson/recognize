{{- if .Values.redis.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "recognize.fullname" . }}-redis-master
  labels:
    {{- include "recognize.labels" . | nindent 4 }}
    app.kubernetes.io/component: redis
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
      protocol: TCP
  selector:
    {{- include "recognize.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: redis
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "recognize.fullname" . }}-redis
  labels:
    {{- include "recognize.labels" . | nindent 4 }}
    app.kubernetes.io/component: redis
spec:
  serviceName: {{ include "recognize.fullname" . }}-redis-master
  replicas: 1
  selector:
    matchLabels:
      {{- include "recognize.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: redis
  template:
    metadata:
      labels:
        {{- include "recognize.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        {{- if .Values.redis.auth.enabled }}
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          value: {{ .Values.redis.auth.password | quote }}
        {{- end }}
        livenessProbe:
          tcpSocket:
            port: redis
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.redis.master.resources | nindent 12 }}
        volumeMounts:
        - name: redis-data
          mountPath: /data
  {{- if .Values.redis.master.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.redis.master.persistence.storageClass }}
      storageClassName: {{ .Values.redis.master.persistence.storageClass }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.redis.master.persistence.size }}
  {{- else }}
      volumes:
      - name: redis-data
        emptyDir: {}
  {{- end }}
{{- end }}
